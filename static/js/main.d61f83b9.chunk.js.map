{"version":3,"sources":["Components/card.js","Components/cardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Components/CounterButton.js","Components/Header.js","Containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","Components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Components_Header","Components_SearchBox","Components_Scroll","ErrorBoundary","cardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","__webpack_require__","d","__webpack_exports__","store","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d61f83b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt = \"robots\" src = {`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Components/card.js';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key = {i} \r\n                        id = {robots[i].id} \r\n                        name = {robots[i].name} \r\n                        email = {robots[i].email}\r\n                        \r\n                    />\r\n                ); \r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className = \"pa2\">\r\n            <input \r\n                className = \"pa3 ba b--green bg-lightest-blue\"\r\n                type = \"search\" \r\n                placeholder = \"search robots\" \r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{overflowY:'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError){\r\n      return <h1>Ooops. That is not good</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component}  from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: this.state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <button color ={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component}  from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1 className = 'f1'>Robofriends</h1>\r\n                <CounterButton color ={'red'} />\r\n                \r\n            </div>\r\n\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/cardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport '../Containers/App.css';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport Header from '../Components/Header';\r\n\r\nimport { setSearchField, requestRobots} from '../action';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n          return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n          <h1>Loading</h1>:\r\n            (\r\n              <div className = \"tc\">\r\n                  <Header />\r\n                  <SearchBox searchChange = {onSearchChange}/>\r\n                  <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots = {filteredRobots} />\r\n                    </ErrorBoundary>  \r\n                  </Scroll>\r\n                  \r\n              </div>\r\n            );\r\n       \r\n    }\r\n   \r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('http://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n  .catch(error => dispatch({ type:REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n} \r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleWare from 'redux-thunk'\nimport App from './Containers/App';\nimport './Containers/App.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nexport const store = createStore(rootReducer, \n  applyMiddleware(thunkMiddleWare), logger\n  );\n\n\nReactDOM.render(\n                <Provider store = {store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}